package se.skl.tp.vp.certificate;


import io.undertow.util.FileUtils;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;

import java.security.cert.X509Certificate;
import javax.security.auth.x500.X500Principal;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Value;
import se.skl.tp.vp.exceptions.VpSemanticException;

public class HeaderCertificateHelperImplTest {

  public static final String PRINCIPAL_OK = "CN=Hermione Granger, O=Apache Software Foundation, OU=Harmony, L=Hogwarts, ST=Hants, C=GB";
  public static final String PRINCIPAL_HEX_OU = "OU=#00074861726d6f6e79";
  public static final String PRINCIPAL_MISSING_OU = "CN=Hermione Granger, O=Apache Software Foundation, L=Hogwarts, ST=Hants, C=GB";
  final String pattern = "(?:OU|2.5.4.5|SERIALNUMBER)=([^,]+)";
  final String vpInstance = "NTjP Develop";
  HeaderCertificateHelperImpl headerCertificateHelper = new HeaderCertificateHelperImpl(pattern, vpInstance);

  @Value("${http.forwarded.header.auth_cert}")
  private String authCertName;

  @Test
  public void getSenderIDFromHeaderCertificate() {
    String senderId = headerCertificateHelper.getSenderIDFromHeaderCertificate(mockCert(PRINCIPAL_OK));
    assertEquals("Harmony", senderId);
  }

  @Test
  public void getSenderIDFromTraefikHeaderCertificate() {
    String traefikCertHeader = "MIIHKzCCBROgAwIBAgIPAYNAXQ4Di3jwZa61gpvyMA0GCSqGSIb3DQEBDQUAMEkxCzAJBgNVBAYTAlNFMREwDwYDVQQKDAhJbmVyYSBBQjEnMCUGA1UEAwweVEVTVCBTSVRIUyBlLWlkIEZ1bmN0aW9uIENBIHYxMB4XDTIyMDkxNTA4NTYyM1oXDTI0MDkxNTIxNTgwMFowezELMAkGA1UEBhMCU0UxETAPBgNVBAcTCEthcmxzdGFkMRowGAYDVQQKExFOb3JkaWMgTWVkdGVzdCBBQjEeMBwGA1UEAxMVdGVzdC5ub3JkaWNtZWR0ZXN0LnNlMR0wGwYDVQQFExRUU1ROTVQyMzIxMDAwMTU2LUIwMjCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBALmw7Payta%2BpLaQsXx%2FT3KbaBoQgeT9MhteK1E2eFfgFowH7vhxowZo6DVBeJmUrD5%2F1LIM0LJwwexFaCSJiHSpTjbFnNdEnlEemmlEmLp1qGgsnshQzdO6RsWxvLpG33FnZ%2FrfrFfXSWQZm38CJe%2Ff9cevGOqp8RDvUXxAO4h%2FFoQdfTa7UmJj3yA1GZcjA127Uv3wkITGBzz8YDRcTxb3Y8yOl2zaVALv0O7t3WpxaeplFmmqMB1TL2%2BXPafr81%2FKlOrK%2Fy4eexlXmpONkuiW2h7Rg5z8FTvbne8r11s6BixE%2F2vP8p2vpEt45KWhmbvrRB3RoRXDW%2B3pZb%2BWwh6b9NGUnDuwS4F%2BXM2SQmgB0UJDdldOWU9aYxffl2C4BLTwJkoPAx7Tr70JO%2FthviqJFh4wh5vRdAsYNTaaCtLD89jhx5G0O1i80bY2j6X%2Fx97UztayngP9pj4%2FCWhHq4QG4DfL1VSW%2FIAyl6UQ1IndvJ1tb7loZESqwhQz1GFGr24BdDmNETfVXjnmxkybaZect0ncTwBk8hSyjOyhklyNtl1WXI3l59ZrjpNJvrm1tC9qAx3b08PH0PU4ZH%2F514cHzRukWkHtcv5kN5OxlUiFuOS309kDAu1AABrFy%2FqpgolGpjTPvxeM85ZCuJLQx46LuABDI8dFgTLFlRhSMEGGHAgMBAAGjggHcMIIB2DAfBgNVHSMEGDAWgBQqupPB0U1nxJZcz8Ht48MJORgUHzAdBgNVHQ4EFgQU3YPaXJIdxH%2FOLhx1MtcmHoUIUAMwDgYDVR0PAQH%2FBAQDAgWgMIGJBgNVHSAEgYEwfzA9BgZngQwBAgIwMzAxBggrBgEFBQcCARYlaHR0cHM6Ly93d3cuaW5lcmEuc2Uvc2l0aHMvcmVwb3NpdG9yeTA%2BBgcqhXBKCIN5MDMwMQYIKwYBBQUHAgEWJWh0dHBzOi8vd3d3LmluZXJhLnNlL3NpdGhzL3JlcG9zaXRvcnkwIAYDVR0RBBkwF4IVdGVzdC5ub3JkaWNtZWR0ZXN0LnNlMEQGA1UdHwQ9MDswOaA3oDWGM2h0dHA6Ly9jcmwxcHAuc2l0aHMuc2UvdGVzdHNpdGhzZWlkZnVuY3Rpb25jYXYxLmNybDAdBgNVHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUHAwIwcwYIKwYBBQUHAQEEZzBlMCMGCCsGAQUFBzABhhdodHRwOi8vb2NzcDFwcC5zaXRocy5zZTA%2BBggrBgEFBQcwAoYyaHR0cDovL2FpYXBwLnNpdGhzLnNlL3Rlc3RzaXRoc2VpZGZ1bmN0aW9uY2F2MS5jZXIwDQYJKoZIhvcNAQENBQADggIBAGsclUJVHif%2BbwkGBKdX7SDmrR4bJSW%2FZF%2FAxJ%2FlTlohM8bvva4uVlOXRcaqpmyih9%2BChk6Grfw6q8iVU3OKOPoYc%2FSNHvsWCtF0Xyd3Ds8mz8wOIW8Ur0H2Ke5EwIbWI0cnKpenCF1cy231IP1CI1PF%2Fk3U200p2vSwc%2Bnjg9ZH7RNj3R5aIct3Dbh452GcJK5bvfx2gK4OWm1BlKhdm%2Bl3g811NosigPv3F0yGz%2Fpyh4TBcPsQs5pzTReQFloK5yyZl25G3hzsuvfcr1AI2KCy6KmyyRJpzHdtO18RB5yByuv5%2BESmANNTRdC78uYCUThVvst0nlpvVJXmoG5R0TanTY6xZB6LMFN%2FXntyFiEbkjhtfFk29x%2BXVMALQt75Yt1Qp6BEHh4btHUv%2BKVSIe5Rr0kWXi6ALjaoV7DSK%2BaMxwNtZAEA3Gq8Fh92QB0iXlBuW7spvosHbdYWLRIVZtK%2FP7ijTGOR0Aps6yo1CuCwKCe19RkgkHFsB7cBX0XvPVSsOUYbCjrnvmmAl8G0sZyivaRakEXGr7D7MkITjSbxWWpOSwp9ES4KHxu%2BxHYNmE49m3zpy1N12IEhAqpen%2FCGZ0SpeIPWykZfbPsyHufzbq4dac9neCwakN3fnrrzZ2EGyGNZgHgW%2BEYEvHvngvZHnrefFBAta83uUBMoZp2c,MIIGfDCCBGSgAwIBAgIPAWnYKuVOwSlU2yGmZXExMA0GCSqGSIb3DQEBDQUAMEUxCzAJBgNVBAYTAlNFMREwDwYDVQQKDAhJbmVyYSBBQjEjMCEGA1UEAwwaVEVTVCBTSVRIUyBlLWlkIFJvb3QgQ0EgdjIwHhcNMTkwNDAxMDkxMDQxWhcNNDkwOTE1MTgwMDAwWjBJMQswCQYDVQQGEwJTRTERMA8GA1UECgwISW5lcmEgQUIxJzAlBgNVBAMMHlRFU1QgU0lUSFMgZS1pZCBGdW5jdGlvbiBDQSB2MTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAMlbA%2FhZP1RbkUYnIVbo7pily%2FfegOPRb0tU17FIm8lM%2Bz8n01ty725%2B%2F4hyKwL1cJIo2lCO95WL0Zp%2FxNIdLzFO0k%2Bcej7cc42vZjdfk95QfMfVsx7%2FYtGUx%2BMVpsYOB0y07H1Gl%2B6KgdlEmjzzYcpkexsu7D%2B7bBkIOpTA5reQhGAx%2F8v2gPQ6CBw2eg5%2BdUAx%2FVcNpEJIABq1Xht1MddlTttP6jhdShPLkK88j8qA7dVi%2BHwJgC9OCz8kcglcFSnGYU89a8BkFlbAbWoVPUpnjyVF4VC7p1JuxuKWAxjZyWOmNBPf74v5cpOanoqLKD5Lum0nszoonHUk2n8LqXuwXgqkpL%2F6vZBi1WeOFJ3gi%2FqL8mpkAHX9lNelkmalCApSLunlAGte7519cyw1QQa8Jy3ObfaoMmS4ZQGpZE47%2FVtpRXykhhb7jCfArRyte%2BsY9h1QCsHYR%2F9nxdQM%2F2BAXYr6YozXWLeOxKKM%2F76h5vbokN2W2N2OEkznen4lt3pND03iNKyPacEvkCBg6yXWmsHJw1BbqOcIHRI%2FdqFPQTkWX7WSDp6Y9YklMfO053U7sTg91CDh5iORKkWQvNKdZH3GcuMUk6QfTRIJ%2BoUg1j30V2XxokkAMvoKV71%2FOlr6YIDUF9gWVZiaTJq2cDwTGJ9YsbFOuRDGO8tEEV6bAgMBAAGjggFjMIIBXzAfBgNVHSMEGDAWgBS8tooRggWeIGERN%2BDdsdwCL3%2BbxDAdBgNVHQ4EFgQUKrqTwdFNZ8SWXM%2FB7ePDCTkYFB8wDgYDVR0PAQH%2FBAQDAgEGMEYGA1UdIAQ%2FMD0wOwYEVR0gADAzMDEGCCsGAQUFBwIBFiVodHRwczovL3d3dy5pbmVyYS5zZS9zaXRocy9yZXBvc2l0b3J5MBIGA1UdEwEB%2FwQIMAYBAf8CAQAwQAYDVR0fBDkwNzA1oDOgMYYvaHR0cDovL2NybDFwcC5zaXRocy5zZS90ZXN0c2l0aHNlaWRyb290Y2F2Mi5jcmwwbwYIKwYBBQUHAQEEYzBhMCMGCCsGAQUFBzABhhdodHRwOi8vb2NzcDFwcC5zaXRocy5zZTA6BggrBgEFBQcwAoYuaHR0cDovL2FpYXBwLnNpdGhzLnNlL3Rlc3RzaXRoc2VpZHJvb3RjYXYyLmNlcjANBgkqhkiG9w0BAQ0FAAOCAgEADFVLZJwNHcPsc1s0wAHJ9NJxvCm2knQSKYnO9eIkAjkKmIdbyKLLt5ztF6Pr%2FK8%2B9aQwXYZ4aZYKnR7ZUs5lf1Jkcf9oHDX47tOLj5Q%2BRPBgNwppkcPVZRHGApAvjdOtkq3p17Oaq1vK5GC0m7dtgjlQ70KMXO1AzL%2FaBQjedGiGkbTz7RISpD7Lid7s2ec8FHKIJ2xpPnemmzq3N2ksSpSWnKx9vrIQi4KqMt3yCKj%2B%2Fhwd4tdLug6JVcsUTbr%2Fstx9LD00drqxaEqaUjRRnD20PFfrwsUGrSFPxLydR%2FUq4vKAh%2BYxWbhDzongP%2FPo7F8ocfczkBspF0fph4WDpBHUPC%2BNVvRJTkoRF5zyn7lleSBUUSqyr4%2Bhxl%2FAcu%2BsgreGXUAxWfgSClUHjnMtFy5geS2dXrGOz%2F%2BDgnhkgHg4Et%2B2w61p5ZBcNsc%2Bbw8LcKxwaXqvMrAC5MdJBy3D0i%2FoO%2Ftt9PmAFNYRsiolwW6kf41erO39F5fsgxhjWVCQLpm3SvqNuBI79Cj5BgGKVdFgL9O2G4l04SfhUjlih0VMLrj60Y4FY3Sqd7VZKU7%2FTqnAZex3xkKs35AZ9zuz%2FmBy1vJHZYmeOL%2FQX11jX%2Fpyuil5E0Jzi7Z8%2BB2k8By71rghXJ266u1qMZyqFavUf1Bpuj4GQL9VFwDmC3%2Fi%2B4Y%3D,MIIFdjCCA16gAwIBAgIPAWnYIw%2FJjncEZcIdSRTfMA0GCSqGSIb3DQEBCwUAMEUxCzAJBgNVBAYTAlNFMREwDwYDVQQKDAhJbmVyYSBBQjEjMCEGA1UEAwwaVEVTVCBTSVRIUyBlLWlkIFJvb3QgQ0EgdjIwHhcNMTkwNDAxMDkwMjUzWhcNNDkwOTE1MTgwMDAwWjBFMQswCQYDVQQGEwJTRTERMA8GA1UECgwISW5lcmEgQUIxIzAhBgNVBAMMGlRFU1QgU0lUSFMgZS1pZCBSb290IENBIHYyMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAz86dte1yqq66WPttOXXqAlkpqU2Uo2WaFmE8qyc0kc107HXEVbI7LTqpf7aFyOF8QfgUBZH2BmplfX6sIaM%2FHOZDWHNfvaBonGhl7WSBhSrxuu%2BWRrNIy4ounauN4PGeuaHIY85aQ3yhNPwUXkH669oyB5PYXcGKkCPbZzGgxEFmhW49vlprxYk3OxszMsB4xqcqsQLh1zBDd9ToJg3vj%2B2nENq1tGlJabcl6cYZZvUxVUECTxeOUyJfABG4diNkTsMbLS71EVu79CTuzYVoGXSpZYxChqr9dMcv6Y359WCDT3j46Ww2fH%2B9Sk4N25APk%2BOV4GmUptpBRJT4PXOWirYlf34WlU1bz8vp5b1xdD9TyqaNq%2FeKRHKmR5Cwl2kVvgMiIll8VHqq%2BGitASJZyEU2UMjgqZ4uFgdbgc7FQ76ENTnOEbbHqsaw0FMrAXCNAKoVxXFNZ0vFN1bIq3%2F%2FQSppfbrc2O8zq%2BAs2vwmqGx3ZjYlbflsP5O3lkUldzKjAVAJNlYdf6BJkShz4iE0T%2BsWnn%2BIDzA%2B0HMis%2BQc5zQmNjkiTAnLs3teXjkyXm%2FYlfzgMxP4fbvzTXNPx2NhK20s7pyI9XVFgIRA%2F6OPvGATR4%2F%2FT1zyhT0R8r9Z0GzXkJal8pBTsj4WdJ8QGJy9v8O29A0t3USzZioS8VMOlbMCAwEAAaNjMGEwHwYDVR0jBBgwFoAUvLaKEYIFniBhETfg3bHcAi9%2Fm8QwHQYDVR0OBBYEFLy2ihGCBZ4gYRE34N2x3AIvf5vEMA4GA1UdDwEB%2FwQEAwIBBjAPBgNVHRMBAf8EBTADAQH%2FMA0GCSqGSIb3DQEBCwUAA4ICAQCT2BCoj4PMeBnnO%2FEEFniD3qn%2BQOt92T3Q4ttp9kY9Pmtc0civ4UY7NPyXUaUUBO8SO0zFpbL6DXLLLfil4LDdlOZTazEpTREIg25n3frs0F7X4Hm76Ul8leHMhELRo4J6R%2B73fK0JX6nLJjNVWmh6aZgquF2k9o8oRetCG9SGqW%2BI2fnAozyy5JHOzKQWbqVNxwsHnvny0sw1pbRRbeiKXsi0h6nPfi89CGXpNjFnpAks077TtbxJcoKHS1rtXu5oq9KbMLRVxg1VNZf%2FZJBU8m49t5t9Hpnb%2BVk70Vo9Ji33sb9CVYNtfpFYCk4FhV0UFFQkjjWL3wyCdUJRHwXVE%2BHTgzEvf4R4wkwlCifPctFZIkriPVko3s2UDQOHPTcGha6NsO%2B1wrVVSP0n5wV2J%2FcXrWYu5rO5kljOL0Pc8c4%2B6nxti03DpJFu%2FQapFiSBt7KqmySALlJ1emrYgZDMZH2Fno2p0SX3SPiHKhG7Mj8ZUkvigUVuE%2BqsDk7ycDy0t10abuJEXX2cxSiRG8PMyDt2pWUAl9YCKtDTVPLJ2m5xoRh1aOkKjQIqrsIQX97%2FkUFqk0uReny93Yh0SAMl3Y3WuQ7N%2BAKFo95JHQpE3QhE4bY%2BPvu8UMImNhPVgqlfdMhZytrH%2BbOujYSSPiwrGP94%2Fq%2BJhkKLErzocw0t%2Bg%3D%3D";
    String senderId = headerCertificateHelper.getSenderIDFromHeaderCertificate(traefikCertHeader);
    assertEquals("TSTNMT2321000156-B02", senderId);
  }

  @Test
  public void getSenderIDFromTraefikHeaderCertificateNoClientCertFail() {
    String traefikCertHeader = "MIIGfDCCBGSgAwIBAgIPAWnYKuVOwSlU2yGmZXExMA0GCSqGSIb3DQEBDQUAMEUxCzAJBgNVBAYTAlNFMREwDwYDVQQKDAhJbmVyYSBBQjEjMCEGA1UEAwwaVEVTVCBTSVRIUyBlLWlkIFJvb3QgQ0EgdjIwHhcNMTkwNDAxMDkxMDQxWhcNNDkwOTE1MTgwMDAwWjBJMQswCQYDVQQGEwJTRTERMA8GA1UECgwISW5lcmEgQUIxJzAlBgNVBAMMHlRFU1QgU0lUSFMgZS1pZCBGdW5jdGlvbiBDQSB2MTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAMlbA%2FhZP1RbkUYnIVbo7pily%2FfegOPRb0tU17FIm8lM%2Bz8n01ty725%2B%2F4hyKwL1cJIo2lCO95WL0Zp%2FxNIdLzFO0k%2Bcej7cc42vZjdfk95QfMfVsx7%2FYtGUx%2BMVpsYOB0y07H1Gl%2B6KgdlEmjzzYcpkexsu7D%2B7bBkIOpTA5reQhGAx%2F8v2gPQ6CBw2eg5%2BdUAx%2FVcNpEJIABq1Xht1MddlTttP6jhdShPLkK88j8qA7dVi%2BHwJgC9OCz8kcglcFSnGYU89a8BkFlbAbWoVPUpnjyVF4VC7p1JuxuKWAxjZyWOmNBPf74v5cpOanoqLKD5Lum0nszoonHUk2n8LqXuwXgqkpL%2F6vZBi1WeOFJ3gi%2FqL8mpkAHX9lNelkmalCApSLunlAGte7519cyw1QQa8Jy3ObfaoMmS4ZQGpZE47%2FVtpRXykhhb7jCfArRyte%2BsY9h1QCsHYR%2F9nxdQM%2F2BAXYr6YozXWLeOxKKM%2F76h5vbokN2W2N2OEkznen4lt3pND03iNKyPacEvkCBg6yXWmsHJw1BbqOcIHRI%2FdqFPQTkWX7WSDp6Y9YklMfO053U7sTg91CDh5iORKkWQvNKdZH3GcuMUk6QfTRIJ%2BoUg1j30V2XxokkAMvoKV71%2FOlr6YIDUF9gWVZiaTJq2cDwTGJ9YsbFOuRDGO8tEEV6bAgMBAAGjggFjMIIBXzAfBgNVHSMEGDAWgBS8tooRggWeIGERN%2BDdsdwCL3%2BbxDAdBgNVHQ4EFgQUKrqTwdFNZ8SWXM%2FB7ePDCTkYFB8wDgYDVR0PAQH%2FBAQDAgEGMEYGA1UdIAQ%2FMD0wOwYEVR0gADAzMDEGCCsGAQUFBwIBFiVodHRwczovL3d3dy5pbmVyYS5zZS9zaXRocy9yZXBvc2l0b3J5MBIGA1UdEwEB%2FwQIMAYBAf8CAQAwQAYDVR0fBDkwNzA1oDOgMYYvaHR0cDovL2NybDFwcC5zaXRocy5zZS90ZXN0c2l0aHNlaWRyb290Y2F2Mi5jcmwwbwYIKwYBBQUHAQEEYzBhMCMGCCsGAQUFBzABhhdodHRwOi8vb2NzcDFwcC5zaXRocy5zZTA6BggrBgEFBQcwAoYuaHR0cDovL2FpYXBwLnNpdGhzLnNlL3Rlc3RzaXRoc2VpZHJvb3RjYXYyLmNlcjANBgkqhkiG9w0BAQ0FAAOCAgEADFVLZJwNHcPsc1s0wAHJ9NJxvCm2knQSKYnO9eIkAjkKmIdbyKLLt5ztF6Pr%2FK8%2B9aQwXYZ4aZYKnR7ZUs5lf1Jkcf9oHDX47tOLj5Q%2BRPBgNwppkcPVZRHGApAvjdOtkq3p17Oaq1vK5GC0m7dtgjlQ70KMXO1AzL%2FaBQjedGiGkbTz7RISpD7Lid7s2ec8FHKIJ2xpPnemmzq3N2ksSpSWnKx9vrIQi4KqMt3yCKj%2B%2Fhwd4tdLug6JVcsUTbr%2Fstx9LD00drqxaEqaUjRRnD20PFfrwsUGrSFPxLydR%2FUq4vKAh%2BYxWbhDzongP%2FPo7F8ocfczkBspF0fph4WDpBHUPC%2BNVvRJTkoRF5zyn7lleSBUUSqyr4%2Bhxl%2FAcu%2BsgreGXUAxWfgSClUHjnMtFy5geS2dXrGOz%2F%2BDgnhkgHg4Et%2B2w61p5ZBcNsc%2Bbw8LcKxwaXqvMrAC5MdJBy3D0i%2FoO%2Ftt9PmAFNYRsiolwW6kf41erO39F5fsgxhjWVCQLpm3SvqNuBI79Cj5BgGKVdFgL9O2G4l04SfhUjlih0VMLrj60Y4FY3Sqd7VZKU7%2FTqnAZex3xkKs35AZ9zuz%2FmBy1vJHZYmeOL%2FQX11jX%2Fpyuil5E0Jzi7Z8%2BB2k8By71rghXJ266u1qMZyqFavUf1Bpuj4GQL9VFwDmC3%2Fi%2B4Y%3D,MIIFdjCCA16gAwIBAgIPAWnYIw%2FJjncEZcIdSRTfMA0GCSqGSIb3DQEBCwUAMEUxCzAJBgNVBAYTAlNFMREwDwYDVQQKDAhJbmVyYSBBQjEjMCEGA1UEAwwaVEVTVCBTSVRIUyBlLWlkIFJvb3QgQ0EgdjIwHhcNMTkwNDAxMDkwMjUzWhcNNDkwOTE1MTgwMDAwWjBFMQswCQYDVQQGEwJTRTERMA8GA1UECgwISW5lcmEgQUIxIzAhBgNVBAMMGlRFU1QgU0lUSFMgZS1pZCBSb290IENBIHYyMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAz86dte1yqq66WPttOXXqAlkpqU2Uo2WaFmE8qyc0kc107HXEVbI7LTqpf7aFyOF8QfgUBZH2BmplfX6sIaM%2FHOZDWHNfvaBonGhl7WSBhSrxuu%2BWRrNIy4ounauN4PGeuaHIY85aQ3yhNPwUXkH669oyB5PYXcGKkCPbZzGgxEFmhW49vlprxYk3OxszMsB4xqcqsQLh1zBDd9ToJg3vj%2B2nENq1tGlJabcl6cYZZvUxVUECTxeOUyJfABG4diNkTsMbLS71EVu79CTuzYVoGXSpZYxChqr9dMcv6Y359WCDT3j46Ww2fH%2B9Sk4N25APk%2BOV4GmUptpBRJT4PXOWirYlf34WlU1bz8vp5b1xdD9TyqaNq%2FeKRHKmR5Cwl2kVvgMiIll8VHqq%2BGitASJZyEU2UMjgqZ4uFgdbgc7FQ76ENTnOEbbHqsaw0FMrAXCNAKoVxXFNZ0vFN1bIq3%2F%2FQSppfbrc2O8zq%2BAs2vwmqGx3ZjYlbflsP5O3lkUldzKjAVAJNlYdf6BJkShz4iE0T%2BsWnn%2BIDzA%2B0HMis%2BQc5zQmNjkiTAnLs3teXjkyXm%2FYlfzgMxP4fbvzTXNPx2NhK20s7pyI9XVFgIRA%2F6OPvGATR4%2F%2FT1zyhT0R8r9Z0GzXkJal8pBTsj4WdJ8QGJy9v8O29A0t3USzZioS8VMOlbMCAwEAAaNjMGEwHwYDVR0jBBgwFoAUvLaKEYIFniBhETfg3bHcAi9%2Fm8QwHQYDVR0OBBYEFLy2ihGCBZ4gYRE34N2x3AIvf5vEMA4GA1UdDwEB%2FwQEAwIBBjAPBgNVHRMBAf8EBTADAQH%2FMA0GCSqGSIb3DQEBCwUAA4ICAQCT2BCoj4PMeBnnO%2FEEFniD3qn%2BQOt92T3Q4ttp9kY9Pmtc0civ4UY7NPyXUaUUBO8SO0zFpbL6DXLLLfil4LDdlOZTazEpTREIg25n3frs0F7X4Hm76Ul8leHMhELRo4J6R%2B73fK0JX6nLJjNVWmh6aZgquF2k9o8oRetCG9SGqW%2BI2fnAozyy5JHOzKQWbqVNxwsHnvny0sw1pbRRbeiKXsi0h6nPfi89CGXpNjFnpAks077TtbxJcoKHS1rtXu5oq9KbMLRVxg1VNZf%2FZJBU8m49t5t9Hpnb%2BVk70Vo9Ji33sb9CVYNtfpFYCk4FhV0UFFQkjjWL3wyCdUJRHwXVE%2BHTgzEvf4R4wkwlCifPctFZIkriPVko3s2UDQOHPTcGha6NsO%2B1wrVVSP0n5wV2J%2FcXrWYu5rO5kljOL0Pc8c4%2B6nxti03DpJFu%2FQapFiSBt7KqmySALlJ1emrYgZDMZH2Fno2p0SX3SPiHKhG7Mj8ZUkvigUVuE%2BqsDk7ycDy0t10abuJEXX2cxSiRG8PMyDt2pWUAl9YCKtDTVPLJ2m5xoRh1aOkKjQIqrsIQX97%2FkUFqk0uReny93Yh0SAMl3Y3WuQ7N%2BAKFo95JHQpE3QhE4bY%2BPvu8UMImNhPVgqlfdMhZytrH%2BbOujYSSPiwrGP94%2Fq%2BJhkKLErzocw0t%2Bg%3D%3D";
    try {
      String senderId = headerCertificateHelper.getSenderIDFromHeaderCertificate(traefikCertHeader);
      fail("Expected an exception for missing client certificate");
    } catch (final VpSemanticException e) {
      assertEquals("VP002 [NTjP Develop] Fel i klientcertifikat. Saknas, är av felaktig typ, eller är felaktigt utformad.", e.getMessage());
      String expectedMessage = "No senderId found in Certificate";
      assertEquals(expectedMessage, e.getMessageDetails());
    }
  }

  @Test
  public void getHexSenderIDFromHeaderCertificate() {
    String senderId = headerCertificateHelper.getSenderIDFromHeaderCertificate(mockCert(PRINCIPAL_HEX_OU));
    assertEquals("Harmony", senderId);
  }

  @Test
  public void getSenderIDFromPemCertificate() {
    String pemCert = FileUtils.readFile(getClass().getClassLoader().getResource("certs/cert_ou_is_tp.pem"));
    String senderId = headerCertificateHelper.getSenderIDFromHeaderCertificate(pemCert);
    assertEquals("tp", senderId);
  }

  @Test
  public void wrongCertFormatShouldThrowVP002() {

    try {
      headerCertificateHelper.getSenderIDFromHeaderCertificate(new X500Principal(""));
      fail("Exception was not thrown when certificate OU missing");
    } catch (final VpSemanticException e) {
      assertEquals("VP002 [NTjP Develop] Fel i klientcertifikat. Saknas, är av felaktig typ, eller är felaktigt utformad.", e.getMessage());
      String expectedMessage = "Exception, unkown certificate type found in httpheader " + authCertName;
      assertEquals(expectedMessage, e.getMessageDetails());
    }
  }

  @Test
  public void pemCertParseErrorShouldThrowVP002() {
    try {
      headerCertificateHelper.getSenderIDFromHeaderCertificate(
          "-----BEGIN CERTIFICATE-----This string will cause a parse error-----END CERTIFICATE-----");
      fail("Exception was not thrown when certificate OU missing");
    } catch (final VpSemanticException e) {
      assertEquals("VP002 [NTjP Develop] Fel i klientcertifikat. Saknas, är av felaktig typ, eller är felaktigt utformad.", e.getMessage());
      String expectedMessage = "Exception occured parsing certificate in httpheader " + authCertName;
      assertEquals(expectedMessage, e.getMessageDetails());
    }
  }

  @Test
  public void nullCertShouldThrowVP002() {
    try {
      headerCertificateHelper.getSenderIDFromHeaderCertificate(null);
      fail("Exception was not thrown when certificate OU missing");
    } catch (final VpSemanticException e) {
      assertEquals("VP002 [NTjP Develop] Fel i klientcertifikat. Saknas, är av felaktig typ, eller är felaktigt utformad.", e.getMessage());
      String expectedMessage = "No certificate found in httpheader " + authCertName;
      assertEquals(expectedMessage, e.getMessageDetails());
    }
  }

  @Test
  public void ifSenderIdNotFoundInCertItShouldThrowVP002() {
    try {
      headerCertificateHelper.getSenderIDFromHeaderCertificate(mockCert(PRINCIPAL_MISSING_OU));
      fail("Exception was not thrown when certificate OU missing");
    } catch (final VpSemanticException e) {
      assertEquals("No senderId found in Certificate", e.getMessageDetails());
      assertEquals("VP002 [NTjP Develop] Fel i klientcertifikat. Saknas, är av felaktig typ, eller är felaktigt utformad.", e.getMessage());
    }
  }

  private Object mockCert(String dnString) {

    final X509Certificate cert = Mockito.mock(X509Certificate.class);
    X500Principal principal = new X500Principal(dnString);
    Mockito.when(cert.getSubjectX500Principal()).thenReturn(principal);
    return cert;
  }
}