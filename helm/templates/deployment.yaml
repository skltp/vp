apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.deployment.name }}
  namespace: {{ .Values.deployment.namespace }}
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: {{ .Values.app.vp.name }}
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        app: {{ .Values.app.vp.name }}
    spec:
      {{- with .Values.pod.hostAliases }}
      hostAliases:
{{ toYaml . | indent 8 }}
      {{- end }}
      containers:
        - name: {{ .Values.container.name }}
          image: {{ .Values.container.image.repository }}:{{ .Values.container.image.version }}
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 15
            httpGet:
              path: status
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 5
          ports:
            - containerPort: 8080
              protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: status
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 2
          resources:
            limits:
              cpu: "801m"
              memory: 800Mi
            requests:
              cpu: 200m
              memory: 401Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File

      dnsPolicy: ClusterFirst
      imagePullSecrets:
        - name: regcred
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
