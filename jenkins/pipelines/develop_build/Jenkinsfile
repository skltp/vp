pipeline {
    agent any
        parameters {
            string(name: 'SONAR_TOKENID', description: 'The SonarQube access token ID.', defaultValue: 'ntjp-sonarqube-token')
            string(name: 'SONAR_ENV', description: 'The SonarQube environment to use when scanning.', defaultValue: 'inera-sonarqube')
            string(name: 'SONAR_PROJECTKEY', description: 'The project key for the SQ project we are scanning', defaultValue: 'ntjp-vp')
            string(name: 'SONAR_JAVA_BINARIES', description: 'What binaries to scan.', defaultValue: '**/target/classes')
            string(name: 'SONAR_JACOCO_REPORTS', description: 'Where the jacoco coverage report is stored.', defaultValue: './report/target/site/jacoco-aggregate/jacoco.xml')
            string(name: 'SONAR_TEST_INCLUSIONS', description: 'What tests to include in the scan', defaultValue: '**/src/test/**/*.java ')
            string(name: 'EMAIL_RECIPIENTS', description: 'The email addresses to send build status to', defaultValue: 'fd8ba3ec.inera.se@emea.teams.ms')
    }

    environment{
        JDK_PATH = tool name: 'openjdk-11'
        JAVA_HOME = "${env.JDK_PATH}"
        MAVEN_IMAGE = 'maven:3.8.4-jdk-11'
        SCANNER_HOME = tool name: 'SonarScanner 4.5'
    }

    stages {
        stage('Build') {
            agent {
                docker {
                    image "${env.MAVEN_IMAGE}"
                    args "-v ${env.JDK_PATH}:${env.JDK_PATH}"
                    reuseNode true
                }
            }
            steps {
                echo 'Since we are running a develop build, we use the byggReleaseConfig for Maven'
                configFileProvider([configFile(fileId: "byggReleaseConfig", variable: 'MAVEN_SETTINGS')]) {
                    sh 'pwd'
                    echo 'Compiling, testing and building...'
                    sh 'mvn --global-settings ${MAVEN_SETTINGS} -P test-coverage,leak clean install'
                    script {
                        pomVersion = sh script: 'mvn help:evaluate -Dexpression=project.version -q -DforceStdout', returnStdout: true
                    }
                }
            }
        }
        stage('SonarScanner'){
            when {
                branch 'develop'
            }
            steps {
                withSonarQubeEnv(credentialsId: "${params.SONAR_TOKENID}", installationName: "${params.SONAR_ENV}") {
                    sh """${env.SCANNER_HOME}/bin/sonar-scanner \
                            -Dsonar.projectKey=${params.SONAR_PROJECTKEY} \
                            -Dsonar.projectVersion=${pomVersion} \
                            -Dsonar.java.binaries=${params.SONAR_JAVA_BINARIES} \
                            -Dsonar.coverage.jacoco.xmlReportPaths=${params.SONAR_JACOCO_REPORTS} \
                            -Dsonar.test.inclusions=${params.SONAR_TEST_INCLUSIONS} \
                            -Dsonar.sourceEncoding=UTF-8
                        """
                }
            }
        }
    }

    post {
        always {
            script {
                echo 'Starting results handling...'
                junit '**/target/surefire-reports/TEST-*.xml'
                jacoco()
                archiveArtifacts '**/target/*.jar'
                echo "Branch: ${BRANCH_NAME}. Only handle Sonar results on the develop branch."
                if ("${BRANCH_NAME}" == 'develop') {
                    timeout(time: 1, unit: 'MINUTES') {
                        waitForQualityGate abortPipeline: true
                    }
                }
            }
        }

        unsuccessful {
            echo 'Build unsuccessful'
            emailext attachLog: true, 
                subject: "Build failed in Jenkins: ${JOB_NAME}#${BUILD_NUMBER}", 
                body: "See ${BUILD_URL} for details.",
                to: "${params.EMAIL_RECIPIENTS}"
        }

        changed {
            script {
                if ("${currentBuild.currentResult}" == 'SUCCESS') {
                    echo "Current build successful, previous build was unsuccessful"
                    emailext attachLog: true, 
                        subject: "${JOB_NAME} back to stable", 
                        body: "See ${BUILD_URL} for details.",
                        to: "${params.EMAIL_RECIPIENTS}"        
                }
            }
        }

        cleanup {
            echo 'Cleaning workspace...'
            cleanWs()
        }
    }
}
